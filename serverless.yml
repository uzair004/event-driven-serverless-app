#$file(service.yml)

service: 'orders-service'
# app and org for use with dashboard.serverless.com
app: 'markaz-task'
org: 'uzair004'

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  httpApi:
    cors: true
  deploymentPrefix: test
  deploymentBucket:
    name: serverless-${self:custom.name}
    blockPublicAccess: true
    # skipPolicySetup: false
  # memorySize: 512
  versionFunctions: false

  # Serverless defaults to "endpointType: edge". Use below to make it regional.
  #  endpointType: regional

  # you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodb.MainTable}
            - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodb.MainTable}/index/${self:custom.dynamodb.MainTableGSI1}
          # - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodb.MainTable}/index/${self:custom.dynamodb.MainTableGSI2}

  environment:
    IS_OFFLINE: ${opt:IS_OFFLINE, false}
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    DYNAMODB_MAIN_TABLE: ${self:custom.dynamodb.MainTable}

package:
  patterns:
    - '!.dynamodb/**'
    - '!./templates/**'
    - '!./.temp/**'
    - '!./__test__/**'
    - '!./.vscode/**'
    - '!./**/*.spec.js'
functions:
  getCustomerOrders:
    handler: src/controllers/index.getCustomerOrdersC
    # middleware:
    # pre:
    # - src/middleware/index.jwtAuth
    # uncomment once user signup/sigin apis implemented
    events:
      - httpApi:
          method: get
          path: /v1/users/{userId}/orders

  createOrder:
    handler: src/controllers/index.createOrderC
    # middleware:
    # pre:
    # - src/middleware/index.jwtAuth
    # uncomment once user signup/sigin apis implemented
    events:
      - httpApi:
          method: post
          path: /v1/orders
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: '*'

  processOrder:
    handler: src/controllers/index.processOrderC
    events:
      - sqs:
          arn: !GetAtt CreatedOrdersQueue.Arn
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
        Resource: !GetAtt ProcessedOrdersQueue.Arn

  updateStock:
    handler: src/controllers/index.updateStockC
    events:
      - sqs:
          arn: !GetAtt ProcessedOrdersQueue.Arn

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-pseudo-parameters
  - '@serverless/safeguards-plugin'
  - serverless-export-env
  - serverless-middleware
  - serverless-iam-roles-per-function
  - serverless-plugin-scripts
  - serverless-deployment-bucket

# for individual dev provide your initials in CLI arguments when deploying e.g. --STAGE=UJ * stage name shall be smaller alphabets
# Do not change serverless.yml, and please do not commit.

params:
  default:
    region: 'us-east-1'
  dev:
    region: 'us-east-1'

custom:
  # domain: myapp.pk
  name: ${self:app}-${self:service}-${sls:stage}

  dynamodb:
    MainTable: ${self:service}-${self:provider.stage}
    MainTableGSI1: GSI1
    stages:
      - dev
      - pre-prod
      - prod
    start:
      dbPath: ./.dynamodb/data/
      migrate: true

  s3:
    MediaBucket: ${sls:stage}-${param:region}-media

  middleware:
    folderName: src/.middleware
    cleanFolder: true

  scripts:
    hooks:
      'before:deploy:deploy': npm run lint

  export-env:
    filename: .env
    overwrite: true

resources:
  - ${file(./resource.yml)}
